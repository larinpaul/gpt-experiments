import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import org.apache.commons.lang3.StringUtils;

import static org.mockito.Mockito.*;

public class EmployeeValidatorTest {

    private EmployeeValidator employeeValidator;
    private EmployeeDto validEmployee;

    @BeforeEach
    public void setup() {
        employeeValidator = new EmployeeValidator();
        validEmployee = new EmployeeDto("John", "Doe", "john.doe@example.com");
    }

    @Test
    public void validateFields_givenNullEmployee_thenThrowsEmployeeValidationException() {
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(null));
    }

    @Test
    public void validateFields_givenBlankFirstName_thenThrowsEmployeeValidationException() {
        validEmployee.setFirstName("");
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenBlankLastName_thenThrowsEmployeeValidationException() {
        validEmployee.setLastName("");
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenValidEmployee_thenDoesNotThrowException() {
        Assertions.assertDoesNotThrow(() -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenValidEmployee_thenCallsValidateEmail() {
        EmployeeValidator spyEmployeeValidator = spy(employeeValidator);
        spyEmployeeValidator.validateFields(validEmployee);
        verify(spyEmployeeValidator, times(1)).validateEmail(validEmployee.getEmail());
    }

    @Test
    public void validateEmail_givenInvalidEmail_thenThrowsEmployeeValidationException() {
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateEmail("invalid_email"));
    }

    @Test
    public void validateEmail_givenValidEmail_thenDoesNotThrowException() {
        Assertions.assertDoesNotThrow(() -> employeeValidator.validateEmail("john.doe@example.com"));
    }
}

// This test class includes five test cases.
// The first three cases validate that an exception is thrown
// when the validateFields method is called with a null EmployeeDto,
// or with an EmployeeDto that has a blank firstName or lastName property.
// The fourth case validates that no exception is thrown
// when a valid EmployeeDto is passed to the method,
// and that the validateEmail method is called.
// The fifth case validates the behavior of the validateEmail method,
// by checking that an exception is thrown when an invalid email is passed,
// and that no exception is thrown when a valid email is passed.


/// THIS IS PROBABLY NOT GOING TO WORK?
// Here's an example stub using Mockito:
import org.apache.commons.lang3.StringUtils;

public class EmployeeValidatorStub extends EmployeeValidator {

    public void validateFields(EmployeeDto employee) {
        if (employee == null) {
            return;
        }
        if (StringUtils.isBlank(employee.getFirstName())) {
            return;
        }
        if (StringUtils.isBlank(employee.getLastName())) {
            return;
        }
        validateEmail(employee.getEmail());
    }
}

// This stub class overrides the validateFields method of the EmployeeValidator class,
// and does not throw any exceptions, regardless of the input.


// Here's an example mock using Mockito:
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import org.apache.commons.lang3.StringUtils;

import static org.mockito.Mockito.*;

public class EmployeeValidatorTest {

    private EmployeeValidator employeeValidator;
    private EmployeeDto validEmployee;

    @BeforeEach
    public void setup() {
        employeeValidator = mock(EmployeeValidator.class);
        validEmployee = new EmployeeDto("John", "Doe", "john.doe@example.com");
    }
    
    @Test
    public void validateFields_givenValidEmployee_thenCallsValidateEmail() {
        employeeValidator.validateFields(validEmployee);
        verify(employeeValidator, times(1)).validateEmail(validEmployee.getEmail());
    }
    

    // This test case uses the `mock` method of the `Mockito` class
    // to create a mock of the `EmployeeValidator` class. The `validateFields` method
    // of the mock is called with a valid `EmployeeDto`,
    // and the `validateEmail` method of the mock is verified
    // to have been called exactly once with the correct email parameter.
    // This test case validates that the `validateEmail` method
    // is called as expected when `validateFields` is called with a valid input.


/// How do I write a stub and a mock for each field of the validateFIelds method?



/// 2023/02/21 // 11:28 //

@Test
@DisplayName("Testing find all")
void testFindAll() {
    Employee employeeTester = new Employee();
    employeeTester.setFirstName("Tester");
    employeeTester.setLastName("Testily");
    employeeTester.setEmail("tester.testily@mail.com");

    Employee employeeTester2 = new Employee();
    employeeTester2.setFirstName("Tester2");
    employeeTester2.setLastName("Testily2");
    employeeTester2.setEmail("tester2.testily@mail.com");

    Employee employeeTester23 = new Employee();
    employeeTester23.setFirstName("Tester23");
    employeeTester23.setLastName("Testily23");
    employeeTester23.setEmail("tester23.testily@mail.com");

    List<Employee> employeeList = List.of(employeeTester, employeeTester2, employeeTester23);
    List<EmployeeDto> employeeDtoList = employeeList.stream().map(employeeMapper::toDto).collect(Collectors.toList());

    Mockito.when(employeeRepository.findAll()).thenReturn(employeeList);
    List<EmployeeDto> actual = employeeService.findAll();

    assertEquals(employeeDtoList.size(), actual.size());

    for (int i = 0; i < employeeDtoList.size(); i++) {
        assertEquals(employeeDtoList.get(i).getFirstName(), actual.get(i).getFirstName());
        assertEquals(employeeDtoList.get(i).getLastName(), actual.get(i).getLastName());
        assertEquals(employeeDtoList.get(i).getEmail(), actual.get(i).getEmail());

    /// I also asked him to write an "enhanced" for-each loop and he did this:
        int i = 0;
        for (EmployeeDto expectedDto : employeeDtoList) {
            EmployeeDto actualDto = actual.get(i++);
            assertEquals(expectedDto.getFirstName(), actualDto.getFirstName());
            assertEquals(expectedDto.getLastName(), actualDto.getLastName());
            assertEquals(expectedDto.getEmail(), actualDto.getEmail());
        }
         
    // You can use a method reference in a lambda expression to simplify the loop like this:
    IntStream.range(0, employeeDtoList.size()).forEach(i -> {
        assertEquals(employeeDtoList.get(i).getFirstName(), actual.get(i).getFirstName());
        assertEquals(employeeDtoList.get(i).getLastName(), actual.get(i).getLastName());
        assertEquals(employeeDtoList.get(i).getEmail(), actual.get(i).getEmail());
    });
    /// Well, I don't see a method reference here...


    /// Let's try writing the negative test case with the help of AI
    /// WELL, THIS ONE DIDN'T WORK... Although it probably can work if we create a new EXCEPTION
    // Negative test case that tests the behavior of the create method
    // when an employee with the same email already exists in the database:
    @Test
    @DisplayName("Testing create if employee with the same email already exists")
    void testCreateEmployeeWithEmailAlreadyExists() {
        // Given
        EmployeeDto employeeDto = new EmployeeDto();
        employeeDto.setFirstName("Tester");
        employeeDto.setLastName("Testily");
        employeeDto.setEmail("tester.testily@mail.com");

        Employee existingEmployee = new Employee();
        existingEmployee.setFirstName("Another");
        existingEmployee.setLastName("Employee");
        existingEmployee.setEmail("tester.testily@mail.com");

        Mockito.when(employeeRepository.findByEmail(anyString())).thenReturn(Optional.of(existingEmployee));

        // When
        Throwable exception = assertThrows(EmployeeAlreadyExistsException.class, () -> employeeService.create(employeeDto));

        // Then
        verify(employeeRepository, never()).save(any());
        assertEquals("Employee with email 'tester.testily@mail.com' already exists", exception.getMessage());
    }


    //// 2022/02/22
    /// Writing test for the update method
    @Test
    @DisplayName("Testing update with invalid email")
    void testUpdateWithInvalidEmail() {
    // Given
    Long employeeId = 1L;
    EmployeeDto employeeDto = new EmployeeDto();
    employeeDto.setFirstName("Tester");
    employeeDto.setLastName("Testily");
    employeeDto.setEmail("tester.testily@mail..com"); // Invalid email address

    Employee employee = new Employee();
    employee.setId(employeeId);
    employee.setFirstName("Old First Name");
    employee.setLastName("Old Last Name");
    employee.setEmail("oldemail@mail.com");

    // Set up mock behavior
    doThrow(new EmployeeValidationException("Invalid email address: " + employeeDto.getEmail()))
            .when(employeeValidator).validToUpdate(employeeDto);

    when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

    // When
    Throwable exception = assertThrows(EmployeeValidationException.class, () -> employeeService.update(employeeId, employeeDto));

    // Then
    verify(employeeRepository, never()).save(any());
    assertEquals("Invalid email address: tester.testily@mail..com", exception.getMessage());
    assertEquals("Old First Name", employee.getFirstName());
    assertEquals("Old Last Name", employee.getLastName());
    assertEquals("oldemail@mail.com", employee.getEmail());
}




    }
}





