import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import org.apache.commons.lang3.StringUtils;

import static org.mockito.Mockito.*;

public class EmployeeValidatorTest {

    private EmployeeValidator employeeValidator;
    private EmployeeDto validEmployee;

    @BeforeEach
    public void setup() {
        employeeValidator = new EmployeeValidator();
        validEmployee = new EmployeeDto("John", "Doe", "john.doe@example.com");
    }

    @Test
    public void validateFields_givenNullEmployee_thenThrowsEmployeeValidationException() {
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(null));
    }

    @Test
    public void validateFields_givenBlankFirstName_thenThrowsEmployeeValidationException() {
        validEmployee.setFirstName("");
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenBlankLastName_thenThrowsEmployeeValidationException() {
        validEmployee.setLastName("");
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenValidEmployee_thenDoesNotThrowException() {
        Assertions.assertDoesNotThrow(() -> employeeValidator.validateFields(validEmployee));
    }

    @Test
    public void validateFields_givenValidEmployee_thenCallsValidateEmail() {
        EmployeeValidator spyEmployeeValidator = spy(employeeValidator);
        spyEmployeeValidator.validateFields(validEmployee);
        verify(spyEmployeeValidator, times(1)).validateEmail(validEmployee.getEmail());
    }

    @Test
    public void validateEmail_givenInvalidEmail_thenThrowsEmployeeValidationException() {
        Assertions.assertThrows(EmployeeValidationException.class, () -> employeeValidator.validateEmail("invalid_email"));
    }

    @Test
    public void validateEmail_givenValidEmail_thenDoesNotThrowException() {
        Assertions.assertDoesNotThrow(() -> employeeValidator.validateEmail("john.doe@example.com"));
    }
}

// This test class includes five test cases.
// The first three cases validate that an exception is thrown
// when the validateFields method is called with a null EmployeeDto,
// or with an EmployeeDto that has a blank firstName or lastName property.
// The fourth case validates that no exception is thrown
// when a valid EmployeeDto is passed to the method,
// and that the validateEmail method is called.
// The fifth case validates the behavior of the validateEmail method,
// by checking that an exception is thrown when an invalid email is passed,
// and that no exception is thrown when a valid email is passed.


// Here's an example stub using Mockito:
import org.apache.commons.lang3.StringUtils;

public class EmployeeValidatorStub extends EmployeeValidator {

    public void validateFields(EmployeeDto employee) {
        if (employee == null) {
            return;
        }
        if (StringUtils.isBlank(employee.getFirstName())) {
            return;
        }
        if (StringUtils.isBlank(employee.getLastName())) {
            return;
        }
        validateEmail(employee.getEmail());
    }
}

// This stub class overrides the validateFields method of the EmployeeValidator class,
// and does not throw any exceptions, regardless of the input.


// Here's an example mock using Mockito:





